<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Warn" throwConfigExceptions="true">
  <!--autoReload 自动重新加载-->
  <!--throwExceptions 抛出异常-->
  <!--throwConfigExceptions="true" NLog 在配置文件错误的情况下抛出异常-->
  <!--在根节点（nlog）配置 internalLogLevel, internalLogFile，可以查看NLog输出日志时的内部信息，比如你配置文件有错误，很有帮助，不过项目发布后还是关闭比较好，以免影响效率；-->

  <extensions>
    <add assembly="NLog.Web.AspNetCore" />
  </extensions>
  <!--<targets>
    <default-wrapper xsi:type="BufferingWrapper" bufferSize="100"/>
    <target name="f1" xsi:type="File" fileName="f1.txt"/>
    <target name="f2" xsi:type="File" fileName="f2.txt"/>
  </targets>-->
  <!--<targets>
    <default-wrapper xsi:type="BufferingWrapper" bufferSize="100" FlushTimeout="10000">
      <wrapper-target xsi:type="AsyncWrapper"/>
    </default-wrapper>
  </targets>-->
  <!--<targets>
    --><!--ElasticSearch保存日志信息-->
        <!--
    <target name="ElasticSearch" xsi:type="ElasticSearch" ConnectionStringName="ElasticSearchServerAddress"
            index="userapi-${date:format=yyyy.MM.dd}" documentType="doc" includeAllProperties="true"
                 layout="[${date:format=yyyy-MM-dd HH\:mm\:ss}][${level}] ${logger} ${message} ${exception:format=toString}">
      <field name="MachineName" layout="${machinename}" />
      <field name="Time" layout="${longdate}" />
      <field name="level" layout="${level:uppercase=true}" />
      <field name="logger" layout=" ${logger}" />
      <field name="message" layout=" ${message}" />
      <field name="exception" layout=" ${exception:format=toString}" />
      <field name="processid" layout=" ${processid}" />
      <field name="threadname" layout=" ${threadname}" />
      <field name="stacktrace" layout=" ${stacktrace}" />
      <field name="Properties" layout="${machinename} ${longdate} ${level:uppercase=true} ${logger} ${message} ${exception:format=toString}|${processid}|${stacktrace}|${threadname}" />
    </target>
  
  </targets>-->
  <targets async="true">
    <!--黑洞 忽略的日志-->
    <target xsi:type="Null" name="blackhole" />
    <default-wrapper xsi:type="BufferingWrapper"  bufferSize="100" FlushTimeout="10000">
      <wrapper-target xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard"/>
    </default-wrapper>
    <target xsi:type="File" name="allfile" fileName="logs/log-${shortdate}.log" layout="${longdate}|${threadid}|${logger}|${uppercase:${level}}|${message} ${exception:format=toString}" maxArchiveFiles="100"/>
    <!-- 发生错误异常记录数据库日志 -->
    <target name="database" xsi:type="Database"  useTransactions="true" connectionString="Data Source=localhost;Initial Catalog=Log;Persist Security Info=True;User ID=sa;Password=SA@123456"  commandText="insert into SystemLog([CreateOn],[Origin],[LogLevel], [Message], [Exception],[StackTrace]) values (getdate(), @origin, @logLevel, @message,@exception, @stackTrace);">
      <!--日志来源-->
      <parameter name="@origin" layout="${callsite}"/>
      <!--日志等级-->
      <parameter name="@logLevel" layout="${level}"/>
      <!--日志消息-->
      <parameter name="@message" layout="${message}"/>
      <!--异常信息-->
      <parameter name="@exception" layout="${exception}" />
      <!--堆栈信息-->
      <parameter name="@stackTrace" layout="${stacktrace}"/>
    </target>
    <!-- 发生致命错误发送邮件日志 -->
    <target name="email" xsi:type="Mail"
               header="-----header------"
               footer="-----footer-----"
               layout="${longdate} ${level} ${callsite} ${message} ${exception:format=Message, Type, ShortType, ToString, Method, StackTrace}"
               html="false"
               encoding="UTF-8"
               addNewLines="true"
               subject="${message}"
               to=""
               from=""
               body="${longdate} ${level} ${callsite} ${message} ${exception:format=Message, Type, ShortType, ToString, Method, StackTrace}"
               smtpUserName=""
               enableSsl="false"
               smtpPassword=""
               smtpAuthentication="Basic"
               smtpServer="smtp.163.com"
               smtpPort="25">
    </target>
  </targets>
  <rules>
    <!-- 除非调试需要，把 .NET Core 程序集的 Debug 输出都屏蔽 -->
    <logger name="Microsoft.*" minLevel="Trace" writeTo="blackhole" final="true" />
    <!-- 除非调试需要，把系统的 Debug 输出都屏蔽 -->
    <logger name="System.*" minLevel="Trace" writeTo="blackhole" final="true" />
    <!-- 记录应用程序的 Debug 输出 -->
    <!--<logger name="SmartCore.*" minlevel="Debug" writeTo="allfile" />-->
    <!-- 记录所有日志级别不低于 Warn 的日志到日志文件 -->
    <logger name="*" minlevel="Info" writeTo="allfile" />
    <!--<logger name="*" minlevel="Error" writeTo="database"/>-->
    <logger name="*" minlevel="Fatal" writeTo="email" />
  </rules>
</nlog>